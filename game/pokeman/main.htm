<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="mobile-agent" content="format=html5;url=http://ccx01.github.io">
    <meta name="applicable-device"content="mobile">
    <meta name="robots"content="all"/>
    <meta name="format-detection"content="telephone=no"/>
    <meta name="mobile-web-app-capable"content="yes">
    <meta name="apple-mobile-web-app-capable"content="yes"/>
    <meta name="Description"content="恶搞版web口袋妖怪，没有任何版权，属于个人兴趣作品，请勿用于商业目的。"/>
    <meta name="Keywords"content="pokemon,口袋妖怪,三国志,游戏"/>
    <meta name="viewport"content="width=640,minimum-scale=0,maximum-scale=5,user-scalable=no">
<title>破壳曼 够！</title>
<style>
/*reset*/
::-webkit-input-placeholder{color:#999;}
input[type="text"],input[type="password"],select{-webkit-appearance:none;appearance:none;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0);border-radius:0;font-family:'\5FAE\8F6F\96C5\9ED1';}
body,ul,ol,p,h1,h2,h3,h4{margin:0;padding:0;}
img{border:0;display:block;}
a,button,input{-webkit-tap-highlight-color:rgba(255,0,0,0);}
ol,ul{list-style:none;}
html{-webkit-text-size-adjust:none;font-size:16px;}
body,html{-webkit-tap-highlight-color:transparent;-webkit-user-select:none;width:100%;height:100%;}
.c:after{content:'\20';display:block;height:0;line-height:0;visibility:hidden;clear:both;}
.hide{display:none;height:0;font-size:0;line-height:0;visibility:hidden;overflow:hidden;}
a{text-decoration:none;}
a:focus{outline:none}

/*page*/
body{font-size:1rem;}
.stage{width:100%;height:100%;max-width:640px;padding-bottom:150px;margin:0 auto;position:relative;}
.dr{margin:100px auto;width:300px;height:400px;background:url(img/dr.jpg) no-repeat;background-size:100%;}
.dialog{position:fixed;bottom:0;left:0;width:640px;height:100px;background:#000;border-radius:5px;color:#fff;font-size:1.5rem;padding:13px 30px;box-sizing:border-box;line-height:1.5em;z-index:999;}
.dialog:before{content:"";width:630px;height:90px;bottom:4px;left:4px;border-radius:5px;border:1px solid #fff;background:#000;position:absolute;z-index:-1;}
.confirm,.cmd{display:none;position:fixed;color:#fff;font-size:1.5rem;padding:13px 30px;box-sizing:border-box;line-height:2em;z-index:999;bottom:110px;right:10px;}
.confirm a,.cmd a{display:block;color:#fff;}
.cmd{    width: 50%;}
.cmd a{width:120px;float:left;    border-radius: 5px;
    margin: 5px;
    text-align: center;    background-color: #000;}
.cur{display:block;width:0px;height:0px;border:10px solid rgba(0,0,0,0);border-top:10px solid #fff;position:absolute;right:15px;bottom:5px;-webkit-animation:bounce 0.8s infinite;animation:bounce 0.8s infinite;}
@-webkit-keyframes bounce{
    from{-webkit-transform:translateY(0px);}
    to{-webkit-transform:translateY(3px);}
}
@keyframes bounce{
    from{transform:translateY(0px);}
    to{-webkit-transform:translateY(3px);}
}
.ball,.capture{position:absolute;width:70px;height:70px;background:url(img/ball.png) no-repeat;background-size:100%;z-index:9;}
.capture{opacity:0;z-index:999;top:700px;left:70px;transition-property:top,left;transition-timing-function:cubic-bezier(0,.72,.5,1.55),ease-out;transition-duration:1s,1s;}
.capture.ac{opacity:1;z-index:999;top:100px;left:500px;}
.b1{top:500px;left:110px;}
.b2{top:630px;left:260px;}
.b3{top:500px;left:510px;}
.ball img{display:none;transform:translate3d(-50%,-50%,0);}
.show_man,.battle{display:none;position:fixed;width:100%;height:100%;top:0;left:0;z-index:99;background:rgba(0,0,0,0.8);-webkit-animation:flash 0.6s 1;animation:flash 0.6s 1;}
@-webkit-keyframes flash{
    from,50%{background:rgba(255,255,255,0.1);}
    to,25%,75%{background:rgba(0,0,0,0.8);}
}
@keyframes flash{
    from,50%{background:rgba(255,255,255,0.1);}
    to,25%,75%{background:rgba(0,0,0,0.8);}
}
.show_man{background-image:url(img/p1.png);background-size:200px;background-repeat:no-repeat;background-position:235px 300px;}
.wound{-webkit-animation:wound 0.6s 1;animation:wound 0.6s 1;}
@-webkit-keyframes wound{
    from,50%{opacity:1;}
    to,25%,75%{opacity:0.3;}
}
@keyframes wound{
    from,50%{opacity:1;}
    to,25%,75%{opacity:0.3;}
}
.data{display:none;color:#fff;border:1px solid;width:500px;height:400px;margin:200px auto;font-size:30px;line-height:60px;background-color:#000;}
.data img{float:left;margin-right:30px;height:400px;}
.enemy,.me{overflow:hidden;}
.me{margin-top:300px;}
.enemy_info,.me_info{margin:50px;width:300px;color:#fff;font-size:30px;line-height:60px;}
.enemy_img,.me_info{float:right;}
.enemy_img,.me_img{margin:50px;}
.enemy_hp,.me_hp{margin-top:10px;width:300px;border:1px solid;height:10px;padding:1px;}
.enemy_hp div,.me_hp div{background-color:#fff;width:100%;height:8px;transition:1s;}
#debug{display:none;position:absolute;top:0;left:0;width:100%;z-index:99;background-color:rgba(0,0,0,0.5);height:50px;color:#fff;}
.start{display:none;background:rgba(0,0,0,0.8);position:fixed;top:0;left:0;width:100%;height:100%;z-index:9999;}
.btn{width:400px;text-align:center;margin:40% auto;display:block;border:1px solid;color:#000;font-size:30px;line-height:50px;background-color:rgba(255,255,255,0.8);}

.pm_list {
    font-size: 30px;
    line-height: 45px;
}
.pm_list li {
    padding: 30px;
    border-bottom: 1px solid #333;
    overflow: hidden;
}
.pm_list_img {
    float: left;
    width: 100px;
    height: 100px;
}
.pm_list_img img{
    height: 100%;
}
.pm_detail {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    font-size: 30px;
    line-height: 1.5em;
    padding: 100px 20px;
    width: 100%;
    height: 100%;
    color: #fff;
    background-color: rgba(0,0,0,0.8);
    overflow: hidden;
    box-sizing: border-box;
}
.pm_detail_img {
    float: left;
    width: 190px;
    margin-right: 20px;
}
.pm_detail_img img{
        margin: 0 auto;
    height: 190px;
}
.pm_detail_info {
    float: left;
        width: 350px;
}
.leader,.feed,.close {
    border: 1px solid;
    margin: 20px 0;
    text-align: center;
    background-color: rgba(255,255,255,0.1);
}
.tpl{display: none;}
h2 {
    height: 50px;
    line-height: 50px;
    text-align: center;
    box-shadow: 0 1px 3px #999;
}
</style>
</head>
<body>
    <div id="debug"></div>
    <h1 class="hide">破壳曼 够！</h1>
    <div class="loading">
        <span class="num"></span>
    </div>
    <div class="stage">
        <!-- 已有精灵列表 -->
        <h2>拥有的小精灵</h2>
        <ul class="pm_list">
            <li data-pm="1">
                <div class="pm_list_img"><img src="img/p1.png"></div>
                <div class="pm_list_info">
                    <p>阿biang哥 (lv1)</p>
                    <p>体力：20/20</p>
                </div>
            </li>
        </ul>

        <!-- 精灵详情 -->
        <div class="pm_detail" data-pm="1">
            <div class="pm_detail_img">
                <img src="img/p1.png">
                <div class="leader">出战</div>
                <div class="feed">喂食</div>
                <div class="close">关闭</div>
            </div>
            <div class="pm_detail_info">
                <p>阿biang哥</p>
                <p>等级：1</p>
                <p>体力：20/20</p>
                <p>武力：2</p>
                <p>智力：2</p>
                <p>技能：
                    <br>嚎叫——有一定概率使对方感到害pia，跳过一个回合
                </p>
            </div>
        </div>

        <div class="dialog">
            <span>摇一摇会找到其他小精灵</span>
            <i class="cur"></i>
        </div>
        <div class="confirm">
            <a class="yes">是</a>
            <a class="no">让我重新考虑下</a>
        </div>
        <div class="cmd">
            <a data-cmd="atk">大文字</a>
            <a data-cmd="ski">嚎叫</a>
            <a data-cmd="run">逃跑</a>
        </div>

        <div class="battle">
            <div class="enemy">
                <img class="enemy_img" src="img/p2.png">
                <div class="enemy_info">
                    <div class="enemy_name">pokemon</div>
                    <div class="enemy_hp">
                        <div></div>
                    </div>
                </div>
            </div>
            <div class="me">
                <div class="capture"></div>
                <div class="me_info">
                    <div class="me_name">pokemon</div>
                    <div class="me_hp">
                        <div></div>
                    </div>
                </div>
                <img class="me_img" src="img/p1.png">
            </div>
        </div>
    </div>

    <template id="pm_list_tpl" class="tpl">
        <li data-order="{#id}">
            <div class="pm_list_img"><img src="{#img}"></div>
            <div class="pm_list_info">
                <p>{#name} (lv1)</p>
                <p>体力：{#hp}/{#full_hp}</p>
            </div>
        </li>
    </template>
<script type="text/javascript" src="js/zepto.min.js"></script>
<script src="js/gyro.js"></script>
<script>
if (navigator.appVersion.indexOf('Android') != -1){document.addEventListener("DOMContentLoaded",function (e){document.querySelector('.stage').style.zoom = e.target.activeElement.clientWidth / 640;}
);}

(function(){

    // 功能函数
    function getHtml(tpl, data) {
        var html = "";
        for (var i = 0; i < data.length; i++) {
            html += tplEngine(tpl, data[i], i);
        }
        return html;
    }
    function tplEngine(tpl, data, i) {
        var re = /{#(\w+)?}/;
        var or = /{%(\w+)?}/;
        var match;
        while (match = re.exec(tpl)) {
            tpl = tpl.replace(match[0], data[match[1]]);
        }
        while (match = or.exec(tpl)) {
            tpl = tpl.replace(match[0], i);
        }
        return tpl;
    }

    function clone(obj){
        return JSON.parse(JSON.stringify(obj));
    }


    // 精灵池
    var pokemon_pool = {
        "p1": {
            id: "p1",
            name: "阿biang哥",
            img: "img/p1.png",
            atk: 5,
            hp: 20,
            full_hp: 20,
            skill: ['pia']
        },
        "p2": {
            id: "p2",
            name: "白猴子",
            img: "img/p2.png",
            atk: 3,
            hp: 18,
            full_hp: 18,
            skill: ['batter']
        },
        "p3": {
            id: "p3",
            name: "帅哥",
            img: "img/p3.png",
            atk: 6,
            hp: 13,
            full_hp: 13,
            skill: ['reatk']
        },
        "p4": {
            id: "p4",
            name: "胡子",
            img: "img/p4.png",
            atk: 2,
            hp: 33,
            full_hp: 33,
            skill: ['ding']
        },
        "p5": {
            id: "p5",
            name: "血男",
            img: "img/p5.png",
            atk: 10,
            hp: 10,
            full_hp: 10,
            skill: ['blood']
        }
    }

    // 技能池
    var skill_pool = {
        pia: {
            name: "嚎叫",
            brief: "使对方感到害pia，无法动弹",
            func: function(obj1, obj2) {
                queue.add(function(){
                    msg(obj1.name + "发出嚎叫！     ");
                });

                obj2.status = "haipia";
                txt = obj2.name + "受到惊吓，感到害pia";
                cb = function() {
                    round.cur = obj2.role;
                    refreshInfo(obj2.role, round);
                };
                queue.add(function(){
                    msg(txt, cb);
                });
            }
        },
        batter: {
            name: "连击",
            brief: "打出3倍伤害，但是下一回合无法行动",
            func: function(obj1, obj2) {
                obj1.debuff = "pass";

                var damage = obj1.atk * 3;
                obj2.hp -= damage;
                obj2.hp = Math.max(0, obj2.hp);
                obj2.status = "wound";
                $(".cmd").hide();

                cb = function() {
                    round.cur = obj2.role;
                    refreshInfo(obj2.role, round);
                };
                queue.add(function(){
                    msg(obj1.name + "使用连击     ", cb);
                });
                queue.add(function(){
                    msg(obj2.name + "受到" + damage + "点伤害！");
                });
            }
        },
        reatk: {
            name: "防御反击",
            brief: "反弹对方下一回合的普通攻击",
            func: function(obj1, obj2) {
                cb = function() {
                    obj2.status = "hit_self";
                    round.cur = obj2.role;
                    refreshInfo(obj2.role, round);
                };
                queue.add(function(){
                    msg(obj1.name + "进行防御反击    ", cb);
                });
            }
        },
        blood: {
            name: "吸血",
            brief: "攻击减半，但是造成的伤害将回复自身生命值",
            func: function(obj1, obj2) {
                var damage = obj1.atk * 0.5 | 0;
                obj2.hp -= damage;
                obj2.hp = Math.max(0, obj2.hp);
                obj2.status = "wound";

                obj1.hp += damage;
                obj1.hp = Math.min(obj1.hp, obj1.full_hp);

                cb = function() {
                    refreshInfo(obj1.role);
                    round.cur = obj2.role;
                    refreshInfo(obj2.role, round);
                };
                queue.add(function(){
                    msg(obj1.name + "扑了上去    ");
                });
                queue.add(function(){
                    msg(obj2.name + "受到" + damage + "点伤害，" + obj1.name + "恢复" + damage + "点生命值    ", cb);
                });
            }
        },
        ding: {
            name: "憋气",
            brief: "回复20%生命值",
            func: function(obj1, obj2) {
                obj1.status = "none";
                var damage = obj1.full_hp * 0.2 | 0;
                obj1.hp += damage;
                obj1.hp = Math.min(obj1.hp, obj1.full_hp);
                cb = function() {
                    round.cur = obj2.role;
                    refreshInfo(obj1.role, round);
                };
                queue.add(function(){
                    msg(obj1.name + "开始憋气    ");
                });
                queue.add(function(){
                    msg(obj1.name + "恢复" + damage + "点生命值", cb);
                });
            }
        }
    }

    // me:出战的精灵
    var me = clone(pokemon_pool["p1"]);
        me.role = "me";
    var me_pool = [me];

    var enemy = clone(pokemon_pool["p1"]);
        enemy.role = "enemy";

    if(localStorage.me) {
        me = JSON.parse(localStorage.me);
        me.role = "me";
    }
    if(localStorage.me_pool) {
        me_pool = JSON.parse(localStorage.me_pool);
    }

    // 我的持有灵

    // 数据存储
    localStorage.me = JSON.stringify(me);
    localStorage.me_pool = JSON.stringify(me_pool);

    var $dia = $(".dialog");
    var $dia_txt = $(".dialog span");
    var $confirm = $(".confirm");

    // 核心功能，顺序执行各个函数
    var queue = (function(){
        var I = {}

        var q_list = [];

        // 运行
        function run() {
            if(typeof(q_list[0]) == "function") {
                q_list[0]();
            }
        }

        // 完成
        function done() {
            if(typeof(q_list[0]) == "function") {
                q_list.shift();
                run();
            }
        }

        // 加入队列
        function add(func) {
            if(typeof(func) == "function") {
                q_list.push(func);
                run();
            }
        }

        function debug() {
            console.log(q_list);
        }

        I.add = add;
        I.run = run;
        I.done = done;
        I.debug = debug;

        return I;
    }());

    // 进程函数（加入队列顺序执行）
    var msg = (function(){
        return function(str, cb) {
            // 文本信息
            clearTimeout(msg.st);
            $dia_txt.html("");

            var l = str.length;
            var i = 0;

            function tp(i) {
                $dia_txt.html(str.slice(0, i + 1));
                msg.st = setTimeout(function() {
                    i++;
                    if(i <= l) {
                        tp(i);
                    } else {
                        cb && cb();
                        queue.done();
                    }
                }, 50);
            }
            tp(i);
        }
    }());
    msg.st = 0;


    // 界面函数（界面显示，重力感应，按钮响应）

    // 列表选项
    $(".pm_list").on("tap", "li", function(){
        showPM($(this).data("order"));
    });
    $(".close").tap(function(){
        $(".pm_detail").hide();
    });
    $(".feed").tap(function(){
        var or = $(this).parents(".pm_detail").data("order");
        me_pool[or].hp += 20;
        me_pool[or].hp = Math.min(me_pool[or].hp, me_pool[or].full_hp);
        msg(me_pool[or].name + "恢复20点生命值");
        showPM(or);
        refreshList();
    });
    $(".leader").tap(function(){
        var or = $(this).parents(".pm_detail").data("order");
        me = me_pool[or];
        me.role = "me";
        msg(me.name + "！就决定是你了！");
        showPM(or);
        refreshList();
    });

    // 展示精灵详细信息
    function showPM(or) {
        if(me.id == or) {
            $(".leader").hide();
        }else {
            $(".leader").show();
        }

        $(".pm_detail").data("pm", me_pool[or]["id"]);
        $(".pm_detail").data("order", or);
        $(".pm_detail img").attr({
            src: me_pool[or]["img"]
        });
        var pm_detail_info = '<p>' + me_pool[or]["name"] + '</p>';
            pm_detail_info += '<p>体力：' + me_pool[or]["hp"] + '/' + me_pool[or]["full_hp"] + '</p>';
            pm_detail_info += '<p>武力：' + me_pool[or]["atk"] + '</p>';
            for (var i = me_pool[or]["skill"].length - 1; i >= 0; i--) {
                pm_detail_info += '<p>技能：<br>' + me_pool[or]["skill"] + '——' + skill_pool[me_pool[or]["skill"][i]]['brief'] + '</p>';
            };
        $(".pm_detail_info").html(pm_detail_info);

        $(".pm_detail").show();
    }

    // 重力感应
    Gyro.init({
        callback: function(coor, acceleration, ges, mc) {
            if(ges == "shake") {
                battle();
                Gyro.disconnect();
            }
        }
    });
    // battle();

    // 进入战斗场景
    function battle() {
        if(me.hp == 0) {
            msg(me.name + "处于无法战斗的状态");
            return;
        }
        var p = new Date().getTime() % 5 + 1;
        enemy = clone(pokemon_pool["p" + p]);
        enemy.role = "enemy";
        
        initInfo();
        $(".battle").show();
        queue.add(function() {
            msg(enemy.name + "出现了", cmd);
        });
    }
    // 结束战斗
    function battleEnd() {

        $(".battle").hide();
        $(".cmd").hide();
        refreshList();
        
        Gyro.connect();
    }
    // 初始化战斗场景
    function initInfo() {
        me.status = "";
        me.debuff = "";
        enemy.status = "";
        enemy.debuff = "";

        $(".enemy_hp div").css({
            "width": (enemy.hp / enemy.full_hp * 100) + "%"
        });
        $(".enemy_img").attr({
            "src": enemy.img
        });
        $(".enemy_name").html(enemy.name);


        $(".me_hp div").css({
            "width": (me.hp / me.full_hp * 100) + "%"
        });
        $(".me_img").attr({
            "src": me.img
        });
        $(".me_name").html(me.name);
        var skill_cmd = '<a data-cmd="atk">攻击</a>';
        for (var i in me.skill) {
            skill_cmd += '<a data-cmd="' + me.skill[i] + '">' + skill_pool[me.skill[i]]['name'] + '</a>';
        };
        skill_cmd += '<a data-cmd="capture">捕捉</a>';
        skill_cmd += '<a data-cmd="run">逃跑</a>';
        $(".cmd").html(skill_cmd);
    }

    // 战斗指令
    $(".cmd").on('tap', 'a', function(){
        var txt = "";
        var cb = function(){}
        switch($(this).data("cmd")) {
            case "capture":
                enemy.status = "none";
                $(".capture").addClass('ac');
                $(".cmd").hide();
                setTimeout(function(){
                    $(".capture").removeClass('ac');
                    if(Math.random() * 0.5 > enemy.hp / enemy.full_hp) {
                        me_pool.push(clone(pokemon_pool[enemy.id]));
                        txt = "恭喜你捕获了" + enemy.name;
                        cb = battleEnd;
                        queue.add(function(){
                            msg(txt, cb);
                        });
                        return;
                    }else {
                        txt = "很遗憾，你没有抓到" + enemy.name + "，对方血量越低，抓捕的成功率越高";
                        cb = function() {
                            round.cur = "enemy";
                            refreshInfo("enemy", round);
                        };
                        queue.add(function(){
                            msg(txt, cb);
                        });
                    }
                }, 1000);
            break;
            case "atk":
                if(me.status == "hit_self") {
                    me.hp -= me.atk;
                    me.hp = Math.max(0, me.hp);
                    me.status = "wound";
                    str = me.name + "被" + enemy.name + "反击，受到" + me.atk + "点伤害!";
                    var cb = function() {
                        round.cur = "enemy";
                        queue.add(function() {
                            msg(str, round);
                        });
                    }
                    refreshInfo("enemy", cb);
                    return;
                } else {
                    enemy.hp -= me.atk;
                    enemy.hp = Math.max(0, enemy.hp);
                    enemy.status = "wound";
                    $(".cmd").hide();

                    cb = function() {
                        round.cur = "enemy";
                        refreshInfo("enemy", round);
                    };
                    queue.add(function(){
                        msg(me.name + "进行攻击          ", cb);
                    });
                    queue.add(function(){
                        msg(enemy.name + "受到" + me.atk + "点伤害！");
                    });
                }
            break;
            case "run":
                $(".cmd").hide();
                enemy.status = "none";
                if(Math.random() > 0.8) {
                    txt = me.name + "企图逃跑！未遂！";
                    cb = function() {
                        round.cur = "enemy";
                        refreshInfo("enemy", round);
                    };
                    queue.add(function(){
                        msg(txt, cb);
                    });
                } else {
                    msg(me.name + "逃跑了！");
                    battleEnd();
                    return;
                }
            break;
            // 技能
            case "pia":
            case "batter":
            case "reatk":
            case "blood":
            case "ding":
                // 嚎叫 
                $(".cmd").hide();
                skill_pool[$(this).data("cmd")].func(me, enemy);
            break;
        }
    });

    // 刷新战斗显示信息
    function refreshInfo(obj, cb) {
        switch(obj) {
            case "enemy":
                if(enemy.status == "wound") {
                    $(".enemy_img").addClass('wound');
                }
                $(".enemy_hp div").css({
                    "width": enemy.hp / enemy.full_hp * 100 + "%"
                });
                setTimeout(function(){
                    $(".enemy_img").removeClass('wound');
                    cb && cb();
                }, 1500);
            break;
            case "me":
                if(me.status == "wound") {
                    $(".me_img").addClass('wound');
                }
                $(".me_hp div").css({
                    "width": me.hp / me.full_hp * 100 + "%"
                });
                setTimeout(function(){
                    $(".me_img").removeClass('wound');
                    cb && cb();
                }, 1500);
            break;
        }
    }

    // 刷新精灵列表界面
    function refreshList() {
        for (var i = me_pool.length - 1; i >= 0; i--) {
            me_pool[i].id = i;
        };
        me_pool[me.id] = me;

        $(".pm_list").html(getHtml($('#pm_list_tpl').html(), me_pool));

        localStorage.me = JSON.stringify(me);
        localStorage.me_pool = JSON.stringify(me_pool);
    }
    refreshList();


    // 战斗函数（回合相关）
    function round() {
        // 回合,判断胜负及一些特殊情况
        if(enemy.hp <= 0) {
            queue.add(function() {
                msg(enemy.name + "被打倒了！你增加了1点经验值", battleEnd);
            });
            return;
        }else if(me.hp <= 0) {
            queue.add(function() {
                msg(me.name + "被打败了！", battleEnd);
            });
            return;
        }

        switch(round.cur) {
            case "me":
                if(enemy.hp / enemy.full_hp < 0.4){
                    queue.add(function() {
                        msg(enemy.name + "处于虚弱状态，可以进行捕捉      ");
                    });
                }
                if (me.debuff == "pass") {
                    me.debuff = "none";
                    round.cur = "enemy";
                    queue.add(function() {
                        msg(me.name + "感到精疲力尽        ", round);
                    });
                    return;
                }
                if(me.status == "haipia") {
                    round.cur = "enemy";
                    queue.add(function() {
                        msg(me.name + "感到害pia，无法动弹", round);
                    });
                    return;
                }
                cmd();
            break;
            case "enemy":
                if (enemy.debuff == "pass") {
                    enemy.debuff = "none";
                    round.cur = "me";
                    queue.add(function() {
                        msg(enemy.name + "感到精疲力尽        ", round);
                    });
                    return;
                }
                if(enemy.status == "haipia") {
                    round.cur = "me";
                    queue.add(function() {
                        msg(enemy.name + "感到害pia，无法动弹", round);
                    });
                    return;
                }
                ai();
            break;
        }
    }
    round.cur = "me";

    function ai() {
        // ai行动
        var ski = Math.random() * 5 | 0;
        var str;
        switch(ski) {
            case 0:
            case 1:
                queue.add(function() {
                    msg(enemy.name + "进行攻击!");
                });
                if(enemy.status == "hit_self") {
                    enemy.hp -= enemy.atk;
                    enemy.hp = Math.max(0, enemy.hp);
                    enemy.status = "wound";
                    str = enemy.name + "被" + me.name + "反击，受到" + enemy.atk + "点伤害!";
                    var cb = function() {
                        round.cur = "me";
                        queue.add(function() {
                            msg(str, round);
                        });
                    }
                    refreshInfo("enemy", cb);
                    return;
                } else {
                    me.hp -= enemy.atk;
                    me.hp = Math.max(0, me.hp);
                    me.status = "wound";
                    str = me.name + "受到" + enemy.atk + "点伤害!";
        
                    var cb = function() {
                        round.cur = "me";
                        queue.add(function() {
                            msg(str, round);
                        });
                    }
                    refreshInfo("me", cb);
                }
            break;
            case 2:
                 skill_pool[enemy.skill[0]].func(enemy, me);
            break;
            default:
                me.status = "none";
                str = enemy.name + "在发呆";
        
                var cb = function() {
                    round.cur = "me";
                    queue.add(function() {
                        msg(str, round);
                    });
                }
                refreshInfo("me", cb);
        }
    }

    // 我方行动
    function cmd() {
        $(".cmd").show();
    }

}());

</script>

<script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "//hm.baidu.com/hm.js?c733f37c8529d1373d90a23e09e724b4";
      var s = document.getElementsByTagName("script")[0]; 
      s.parentNode.insertBefore(hm, s);
    })();

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-74514423-1', 'auto');
    ga('send', 'pageview');
</script>
</body>
</html>